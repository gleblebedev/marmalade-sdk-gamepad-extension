/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "gamepad_autodefs.h"
#include "s3eEdk.h"
#include "gamepad.h"
//Declarations of Init and Term functions
extern s3eResult gamepadInit();
extern void gamepadTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static uint32 gamepadGetNumDevices_wrap()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadGetNumDevices"));
    return (uint32)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadGetNumDevices, 0);
}

static uint32 gamepadGetDeviceId_wrap(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadGetDeviceId"));
    return (uint32)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadGetDeviceId, 1, index);
}

static const char* gamepadGetDeviceName_wrap(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadGetDeviceName"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadGetDeviceName, 1, index);
}

static uint32 gamepadGetNumAxes_wrap(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadGetNumAxes"));
    return (uint32)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadGetNumAxes, 1, index);
}

static uint32 gamepadGetNumButtons_wrap(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadGetNumButtons"));
    return (uint32)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadGetNumButtons, 1, index);
}

static uint32 gamepadGetButtons_wrap(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadGetButtons"));
    return (uint32)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadGetButtons, 1, index);
}

static int32 gamepadGetAxis_wrap(uint32 index, uint32 axisIndex)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadGetAxis"));
    return (int32)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadGetAxis, 2, index, axisIndex);
}

static uint32 gamepadIsPointOfViewAvailable_wrap(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadIsPointOfViewAvailable"));
    return (uint32)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadIsPointOfViewAvailable, 1, index);
}

static int32 gamepadGetPointOfViewAngle_wrap(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadGetPointOfViewAngle"));
    return (int32)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadGetPointOfViewAngle, 1, index);
}

static void gamepadRegisterCallback_wrap(s3eCallback callback, void* userData)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadRegisterCallback"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadRegisterCallback, 2, callback, userData);
}

static void gamepadUnregisterCallback_wrap(s3eCallback callback)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadUnregisterCallback"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadUnregisterCallback, 1, callback);
}

static void gamepadUpdate_wrap()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadUpdate"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadUpdate, 0);
}

static void gamepadReset_wrap()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadReset"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadReset, 0);
}

static void gamepadCalibrate_wrap()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad func on main thread: gamepadCalibrate"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)gamepadCalibrate, 0);
}

#define gamepadGetNumDevices gamepadGetNumDevices_wrap
#define gamepadGetDeviceId gamepadGetDeviceId_wrap
#define gamepadGetDeviceName gamepadGetDeviceName_wrap
#define gamepadGetNumAxes gamepadGetNumAxes_wrap
#define gamepadGetNumButtons gamepadGetNumButtons_wrap
#define gamepadGetButtons gamepadGetButtons_wrap
#define gamepadGetAxis gamepadGetAxis_wrap
#define gamepadIsPointOfViewAvailable gamepadIsPointOfViewAvailable_wrap
#define gamepadGetPointOfViewAngle gamepadGetPointOfViewAngle_wrap
#define gamepadRegisterCallback gamepadRegisterCallback_wrap
#define gamepadUnregisterCallback gamepadUnregisterCallback_wrap
#define gamepadUpdate gamepadUpdate_wrap
#define gamepadReset gamepadReset_wrap
#define gamepadCalibrate gamepadCalibrate_wrap

#endif

void gamepadRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[14];
    funcPtrs[0] = (void*)gamepadGetNumDevices;
    funcPtrs[1] = (void*)gamepadGetDeviceId;
    funcPtrs[2] = (void*)gamepadGetDeviceName;
    funcPtrs[3] = (void*)gamepadGetNumAxes;
    funcPtrs[4] = (void*)gamepadGetNumButtons;
    funcPtrs[5] = (void*)gamepadGetButtons;
    funcPtrs[6] = (void*)gamepadGetAxis;
    funcPtrs[7] = (void*)gamepadIsPointOfViewAvailable;
    funcPtrs[8] = (void*)gamepadGetPointOfViewAngle;
    funcPtrs[9] = (void*)gamepadRegisterCallback;
    funcPtrs[10] = (void*)gamepadUnregisterCallback;
    funcPtrs[11] = (void*)gamepadUpdate;
    funcPtrs[12] = (void*)gamepadReset;
    funcPtrs[13] = (void*)gamepadCalibrate;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[14] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("gamepad", funcPtrs, sizeof(funcPtrs), flags, gamepadInit, gamepadTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int gamepadStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&gamepadRegisterExt;
    return 0;
}

int g_gamepadVal = gamepadStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    gamepadRegisterExt();
}
#endif

#endif
